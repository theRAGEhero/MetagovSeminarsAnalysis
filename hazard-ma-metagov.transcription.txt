Speaker 1: Introduce yourselves, and thanks for starting the recording. I'm really happy to have you here, though. Appreciate you accepting our invitation to to come talk about some of the codification and and computability of legal pros. And with that, I will give you the floor.

Speaker 2: Okay. Good. I'll go very briefly. Just I'm James Hazard. I am merely a lawyer. That is I'm been in law practice in one way or another since 1979 in Boston for a stretch, and then my boss sent me to France in 1990. And I didn't come back. So I was a member of the bar there and doing various things. And then for various reasons, we came back to The States to the Bay Area. And we've been bouncing back and forth, but now seem to have landed in Berkeley. As a lawyer, I was at a large firm and it we this was in the eighties, and I happened to be there when our current word processing system failed. It documents had gotten too big for its printers. And I ended up helping guide the firm to networked computers, PCs and WordPerfect. And that started a process of then figuring out how you do document assembly and so forth. And around February, now in in solo practice in Paris, it seemed that the key thing that would make everybody's life better, including my own as a solo practitioner of corporate law, would be if there was a resource, a publicly available resource, a commons of legal text. So what you might call a contract wiki and some others have called a contract wiki. And that led to sort of iteratively through processes that included coming by MIT Connection Science and by the Berkman Center and Primavera de Filippi and then in 2014, suddenly this all moved on to GitHub. So that's my background and I'll let then Megan give you some, give you a little introduction to her.

Speaker 3: Hi everyone, happy to be here. My name is Megan. I am actually at the tail end of my PhD. So in August, I had gone through the private defense, and in December, we'll be headed to my public defense. I am a codex fellow at Stanford. I'm also the managing editor of the MIT computational law report. A lot of my research is really building the linguistic theory bridge, I like to say, between legal text to how do you codify, in computer code. So, that's, I guess, a little bit about me. And, I guess I just want to say that this, common accord is Jim's sort of heart and soul. I had the privilege of connecting with him, based on a paper that I had written looking at various programming languages that were interested in contracting. So that's how kind of we got connected. And then Jim and I had worked on several things together. So we were, I guess project managers or involved in a Northwestern class, the innovation lab, where we tried to integrate prose objects into something that they were working on. Also, Jim had guest lectured in one of my classes that I taught, where he tried to get students that had no, well, mixed legal and policy background and got but without any coding knowledge and tried to get them to use Git to draft a roommate agreement. So we'll show you a little bit about that as well today, but yeah, looking forward to your comments and your and any questions that will come up.

Speaker 2: Cool. Yeah. Yeah. We among the issues in roommate agreement, of course, is who orders pizza. So why don't I flip right in if this makes some sense, I think I'll do a really short presentation. Maybe later we'll do another short presentation because repeating an idea is often a good thing. So if that's okay, and I can figure out how to share my screen. Does that make sense?

Speaker 1: Yeah. I think that works. So what we that is to my understanding then, we're gonna do a short presentation, some discussion, and then possibly, a little bit more presentation depending on how the timing works out.

Speaker 2: Yeah. That's great. Perfect. Yeah. Because the key thing here is to see if we can make some connections between areas of interest, areas of work, and this bit of work that we've been doing. So I'll switch it. Let me excuse all the presentation issues. So if how do I make this and this thing's in the way. If I can how do I make this full screen? Somewhere I can make this full screen. Oh, man.

Speaker 4: If you make this window a bit bigger, you'll see the button of the presentation.

Speaker 2: Sorry. Somebody was being helpful.

Speaker 4: Just increase the size of the window and then present. There

Speaker 5: we go.

Speaker 2: Okay. Increase the size of oh, hang on.

Speaker 4: You can do it like this too. Yeah.

Speaker 2: Yeah. Present. Okay. Present not present. Okay. So this this, it goes back to 02/2015. It was done with Thomas hard Janno. This is part of a dialogue between them and Primavera and me. But the basic notion here is how do you connect up this notion of prose objects that is to say of organized legal text, with the broader problem of decentralized data. So if I okay. Sorry. Here we go. So the general notion here that pardon me, I'm ready. The general notion is where do the words come from that you're reading that are binding you? And it ought to be that there's a system of provenance. It ought to be that we don't endlessly repeat and rehash stuff. If somebody said something well enough one time, why don't we just keep reusing that? And instead of making copies of it, why don't we link to it so that we know that it's not been modified and so forth. So this is in a certain sense, this is compression by of compression of the legal sludge in Cass Sunstein's phrase, compression of the legal sludge into first by text and then by ideas. And it'll turn out we lawyers don't have that many ideas, we just say them in a lot of different ways. So let me see if, man, this really runs. This is well, maybe I can just page yeah. Page down works. Sorry. Okay. So that's the general problem. Legal documents handled mostly as blobs. Word has been the the key disaster for the legal profession. Be a lot better if we organize this stuff. So what would a what would a composable system of legal text look like? And this is old and not my conventions anymore, but this is basically what you're doing. So you're gonna take if you want a document, well, a document has parts here. This is a legal, this is a contract agreement, has a prologue, it has some stuff, stuff that it actually says, it's got a signature and a might have attachments. And each one of these things can be recursively expanded into whatever it is you want. That also means it can be overwritten. So you can customize the thing you can, okay. And that the idea is that then you would have an object model for a legal system. There are certain kinds of things that that seem obvious beasts in this bestiary, like persons and things, and jurisdictions, and stuff like that. So if you think of this as a graph, then you got a bunch of nodes, and we can essentially all transacting is adding another node into this graph by connecting it up to things that are probably already there. And so bear going, you know, digging, you know, sort of projecting down into that, what would a graph of a startup finance look like? It would have a bunch of different documents and it would have a bunch of different people and they would be connected in various ways. And then an object model for a single document. This is again, the safe note the Y Combinator safe note stuff. What would that look like? Again, we've got our persons, and we've got a form and the form is made up of sections and the sections are often made up of subsections. And then this is Thomas's work. How would if we have a central repository or repositories for this legal source stuff, how would people actually transact back and forth, they'd be sending little verifiable messages back and forth, but some of which would point at the oops, point at the repository like that. And these things could be entirely private, they could be on a Blockchain, they could be however you want them to be. You could actually do this using a cocktail napkin from a restaurant by pointing at the URL for the form of agreement that you meant adding a couple of deal points and both of you signing the thing. So more technical information about how you how elements in the graph might come together. So, why don't I pretty much stop there and let's see if we get some discussion people.

Speaker 1: Yeah. So, actually, I wanna prompt the discussion a little bit since you provided the some of the technical context and the historical work. The because the topic of the seminar tends to revolve around governance and sort of, in particular, governance online participatory governance of online spaces, I'd like to observe that more often than not, we are writing policy documents, entering into agreements, forming organizations, and that the capacity for a group to come to consensus on something like a legal document or prose often requires some means of of managing or iterating that thing. And the experience that I've I've had since coming across Common Accord and starting to speak with you is that this is extremely helpful when looking at various collaborative agreements. We recently refactored the contributor agreement that's being used in the GitcoinDAO. It was written I forget who the original author was. Someone from LexDAO. It was published in a Git repo, and it was refactored by by you. There are some other things that I've cross crossed paths with where the the legal pros is effectively becoming part of the, let's just say, the soft infrastructure of these organizations. And if we want participatory governance, then we need a way of participating in the the evolution of those documents, you know, ranging from communities writing policy docs in Google Docs to, you know, coming to agreements around fundraising or actually employment agreements of some kind, contracting agreements of some kind by organizations that don't necessarily have executives or administrators with the authority to do that themselves. So then, you know, the the natural question is if an organization is, you know, democratic and participatory in nature, but it still needs to enter into some form of agreement with other organizations, with contributors, etcetera. Like, how does this decision surface, the pros I mean, the the the legal pros become participatory? And so my personal opinion is that the framework that you've been working on is actually quite valuable for this. And so at least from my perspective, that's why it's immediately relevant to this community, and I hope that sort of spurs some discussion from

Speaker 5: That's great.

Speaker 2: That's great. Yeah. Fabulously. It turns out that that problem is also pervasive. That is one so we did a European, and I'll point to a little bit of that, a European project for the European Commission on modeling the European economy as an ecosystem of contracts. And the the genesis of the the intent there was the European Commission doesn't understand its economy well because none of the measurements that you get are really of adequate detail. And but if you were to if people within the economy were to use an essentially an object oriented approach, then they could have a far better idea of what's going on. And that points out that this problem is fractal. That is to say, the regulators got sort of the same problem that a company has, and they've got very much the same problem that an insurer has, and they have the same problem that an individual has in understanding who their relationships are, what the relationships mean, how to do the next one. So that fits, I think, perfectly into that notion of community.

Speaker 3: So I think part of what's also exciting, I suppose, for prose objects is, as Jim mentioned, this notion of composability. And, I come from a kind of law and linguistics background, so I see a lot of these intersections in compositional semantics where we think about things in as from small meetings, so words, and you put words together and you create bigger meanings, so sentences and whatnot. And I think part of what perhaps Sargam and Jim were referring to is this idea where you can have these sorts of pre negotiated, almost in a way, parts where you piece them together. They're they become Lego blocks, and they become kind of sources where, there's a kind of reliability around their composition. So I think that's one thing that's quite interesting about prose objects, and what really fascinates me is the fact that prose objects is sort of at the nexus of both process and language here, where you're looking at how do you transition from natural language having been the dominant medium through which law has communicated, so legal text, and how do you kind of transition that into a world where code might be the medium to communicate the law. And while also at the same time from a process angle where you're simplifying all that sludge that Jim is talking about, the inefficiencies and the complexity around actually building these agreements. So, yeah.

Speaker 1: In an attempt to bait more of you into this discussion, I will also observe that, you know, Nathan has talked a bit in the past about setting up, sort of things that are DAO like without crypto. To to Megan's point about composability, a lot of the functions of cryptosystems come they they the people are attracted to them, but maybe they don't need that form. So, like, these things are legal in nature, but they but the the function of the composability, the function of, like, the the operators I guess I'm rambling now. Sorry. I apologize. Just like I'm trying to liken this to not needing to think in crypto terms in order to get some of the benefits that have attracted people to crypto. And now we're getting some, action in the chat, so let's pull it out. Nathan or Lane, do you wanna take the floor to ask your question?

Speaker 5: Nathan, feel free to go first.

Speaker 6: Sure. Yeah. Thanks. I I'm just, you know, as I said, eager to to see more. You know, as I mentioned, I'm I'm in the process of working to this rebuild of of this this platform, which is really focused on interface called Community Rule. Just show you a picture of it here. So it's it's an attempt to basically enable, visual construction of group agreements. And, you know, if you fork this one, you can move these things around and describe them and so forth. But we're, you know, it started out as just a totally natural language thing. Now it's got these kind of movable modules. But the goal is to move it toward being much more computational functional. And so I've been looking for kind of computational languages to use as the basis of that. You know, one kind of candidate we've looked at is the Ostrom language design language. But I'd love to hear more about the yeah, just just the state of this, this project and framework and and, you know, how how ready it is and, and also, questions about about interface, whether you've explored what interfaces, you know, could and should look like for people who would who would actually engage in in using this in a design space.

Speaker 2: Why don't why don't I step in and just do a little demo here? There we're getting perfect stuff in the in the feedback here. All questions that we thought about, we think there are answers to. We may not have the best answers to them, but we've got at least working answers to them. But let me just I'll just walk through a complex example of this. So I'm working here locally. This is the same stuff that's up exactly the same stuff that's up as commonaccord.org. The commonaccord.org just pulls from a git repo, uses Heroku. It also blows up frequently if you because of the coding is is perfect but inefficient. Locally it it always works. And I'll take, as I said, a complex example, it's a simple situation, but this is a non disclosure agreement. So non disclosure agreements are extremely widely used and must and much disdain. They are kind of hello world for contracting. And what would a nondisclosure agreement or frankly, any other contract be? It would be some links to some parties here. These are my improvised identity system, a real identity system would tie into some things like the Glyfe work so forth. There's a lot of ontologies out there that do make sense and haven't quite got the traction they should. In any event, it's two parties and a form of agreement. And we'll note here that this form is from party one to party two, which is to say it relates to information disclosed by party one to party two. You can also do party two to party one and you could also do mutual and we'll see how that's done. And then you have a bunch of deal points. So your, you know, what are dates and so forth and you'll note a kind of something that looks a little object oriented d here, but the periods actually just are for convenience. They don't have any any specific meaning. This is, it turns out this is tied into a core concept of this. And you could reach into this solution here for things that somebody has already worked out. Like, if we note here we got Andrea is a human and we're disclosing the information to Andrea and not to a corporation or something like that. So there's actually no reason she needs to speak to anybody, anybody else disclosing this information. So we've got a little formula in there that that covers that situation. But if you decided that you didn't like that, then you could just start writing here and and specify what it is that you wanted. That you would end up looking at something like that. And this renders using Primavera's fabulous Perl code from 2014 done I believe in a McDonald's in Buenos Aires between two conferences. Why McDonald's? Because they have good Wi Fi. So this is the the whole agreement. So we see we have this notion of identities, who's involved, and we still have the, it's structured information, remains structured information. So this is I talked about how they're an ontology. ELF is the life stuff. So an ontology for kinds of organizations, which then means that if we had a computer, we could reason about Acme. We could know that it has a board, we could know that it has a president or needs a president and so forth. And here's all the beautiful lawyer text like this and the here and this is our little human solely thing, little human solely snippet. You can also do very easily the basic HTML stuff so that you can have cross references, can be hyperlinks, and you can actually do that on a kind of semantic basis. So this sends us to the section which has to do with the exception to confidentiality. So, as I say, lots of lots of text here as much as a lawyer might love. But this is just a view of the data. Didn't mean to do that. This is just a view. This is the actual data. So this is the actual thing and you can see how you could then take these parameters and you could dovetail them into another system. You could dovetail them into something that, into a real computing system. So a notion of parameters, pros, and code, a Ricardian model. Then a non disclosure agreement, I mentioned that it can be p one to p two. Well, it can also be p two to p one, and it could also be mutual. Could also make it oops. Sorry. My hands are very cold. It's a little cold in Berkeley. So you could also make that mutual, in which case we'd get this. So something with some open items in it. So, then this would be a mutual agreement. And all of that can use the same library for non disclosure agreements. So basically what we're doing when we click on document up here is we're, we're expanding strings and part of the document is roughly these four points. Deal, it's why not put the deal points upfront? Definitions need to go somewhere. General relationship issues and then housekeeping in the miscellaneous section. And each one of these things is also components. So your confidentiality, we can see what confidentiality see what it is that we've so, yeah, there's and there's a little recursion problem you'll see in this thing. But this is a library that allows you to do lots of stuff regarding confidentiality. What's your engagement? How long does it last? What are the exceptions? All that. So you can need basically, if you you can take any legal idea, any legal idea somewhere will find expression in text. And if you just take that text and start breaking it apart, eventually you'll find the ideas. So, and all of that can be based on a common form. What's a contract agreement? Well, it's got a heading, list some parties, little bit of transition text. And then here we have the meat of the agreement, needs a signature, and it might have annexes to it. And that so this one, there are a lot of different languages in which people do contract agreements. Here is English, but oops. What did I do there? Here's English. My hands are cold. Here's English, but we can also have a general notion of what's a contract agreement. And if we build our contracts like that NDA from this, then we have an object here at the bottom of that stack to which we could attach code like things. For instance, something that tells us that the agreement doesn't have much meaning unless it's actually signed, and it has different meaning after it's expired than it did when it's still in in in validity. And all that is here we see how the thing is actually built up. So when I push document, it goes and looks down through the stack for something called model root. If it's up at the top of the stack, it's done. If it's it has to go all the way down here to find it, well, okay. And now what it's trying to do is to expand doc. And then from doc we're trying to expand those things and then from those things were which did did did did did did we just recursively just expanding a string is the whole system. So why don't I stop there?

Speaker 1: I think we should go back to the chat. This example is super helpful. I just also sort of added for the people who are more technologists that you basically demonstrated the class instance model. Something where you can create classes and choose, you know, fill in parameters of text. And so, with that, I think we should jump to Lane and, then Josh, maybe.

Speaker 5: Sure. Thanks. Thank you for that demo. That was really, really interesting and and really insightful, really exciting to see. Just just helps a lot to visualize what what you've built. Yeah. So so I'm a software developer by trade, and, a lot of the description of, you know, kind of sharing Pose objects, I I I make make very intuitive sense to me. In particular, I like how you described it as a form of compression. That's certainly how we think about it in in software. And as I mentioned in my in my question, there are certain kind of perennial challenges that arise again and again in dependency management in software. And, you know, a couple of these things are like recursive dependencies, circular dependencies, and and then you get a dependency, you know, and a depends on b, and b depends on c, and c depends on a, something like that. Also, managing different versions of of modules or libraries. Sometimes you can have a conflict there. Another example I mentioned is sort of code signing. Right? The idea that if I, like, pull a module or a piece of code off of a source like GitHub, in particular, not centralized, not trusted source, how how do I know that I can kind of trust that code? There isn't something malicious in there. So it's a bit of an open ended question. I'm just wondering how much thought you've given to these second and third order challenges that might arise and if your approach would look something like what we've been doing in software for a few decades or or maybe it'll be totally different. Thanks. Yep.

Speaker 2: Yeah. That's great. Yeah. All those are serious questions. And, yes, there is a good deal of thinking about it. The at at one level, Git allows you to solve many of these problems if you use it and and are willing to rely on it. So, you could on our cocktail napkin, when we reference this form of non disclosure agreement if we also wrote down the shorthand form of the commit number when we were referencing GitHub, that would provide us with a very high degree of non falsability. You can also put it in, I've got some demos. You can put this stuff up on IPFS and reference that stuff. The issue of of there's a kind of notion of releases, that is, maybe we have one form of non disclosure agreement and it developed it's used a bunch and then it's as this is a key connection with the block science work. It's imperfect, it's necessarily imperfect. We should start with the notion that it's imperfect. We expect that it will get better, as people use it. And, if people are are repeatedly tweaking something, then maybe that's a sign that we need either to add a use case or change our basic model. So you can have a notion of releases that can be done in a bunch of ways. One of them would be essentially to use git branches, but on another way would be, essentially just use, time stamping or and now we and and I now remind everybody that I am merely a lawyer. So there are, other solutions out there that are somewhat beyond my kin. This is this is sort of this this takes you as far as my thinking has gone. The little work with Thomas Harjano, also includes that notion. It might be now I'm getting beyond being a lawyer. It might be that there is some kind of deep integration with with Git that one could do that would provide a single solution to what in my thinking is has to be expressed in two ways. Is that responsive?

Speaker 5: That makes a lot of sense. Yeah. Thank you very much for the explanation.

Speaker 1: Megan, do you wanna talk a little bit more about sort of, what you posted in chat? We haven't given you much airtime, and, you're you're on the bill.

Speaker 3: Oh, no. Not at all. As I said, I'm playing more of a supporting actor today for Jim. So I'd it's I'm happy to just take the sidelines. But what I was more interested in, just now was when you talked about, kind of where the negotiation really takes place. I think what's interesting about this is there's always this discussion about, are you not just kind of heading in the direction of boiler plate? And if not, like, we already have something like that. Right? And I think what's interesting here is that it's actually standardization, but at a more granular level. You're looking at components that can be standardized, and then kind of when you're piecing things together, that's where more of the discussion or where the humans become more of an intervention. And so what I was trying to express and what I've basically has said in the comment is that you're kind of looking at a combination of both being increasingly trusting in the terms of the interpretation and being more level with the components and standardization at the component level, but you're also having the flexibility to mix and match with what these components might look like. The question is kind of where where really is the component, and is it standardization more at a conceptual level, or is it kinda standardization at the word or sentence level is

Speaker 1: In your introduction, you also brought up the the the process aspect of this, and as far as the community here does a lot of discussion around governance, I think there's an aspect to which the process of coming to terms that you can agree on in some specific context, however bespoke or not bespoke it is, is actually where this intersects with governance the most. So I I don't know if people are interested in in taking discussion a little bit towards, you know, how this framework might fit into, you know, governing in a a democratic or participatory way, not forcing it. But, I mean, it was certainly what I had in in mind as the sort of sponsor of the session was sort of finding that crossover point.

Speaker 2: Yeah. And if and if I can take that and turn that thing another direction, this note there's the notion of governance of of common accord, governance of a center for decentralized law, governance of a decent law center. And what does that look like? So that as a legal as a commons for these kinds of ideas, it needs governance too.

Speaker 7: Maybe I can jump in briefly, actually, because I wanna respond directly to something that Megan said about or also in the chat. So, actually, I don't know how much background I should be giving about this. Well, so long story short, Megan and I and Jim, Jim, I guess, a series of different calls. And one of the things that happens is I was introduced to a legal tech company called Lawgood that, we've actually been yeah. They're it's great, actually. And we started working more closely with them on a project, basically, where we're applying economic theory, open games, for those of you who are familiar with it, to the analysis of legal contracts. And Loguid just shipped me a bunch of, m and a contracts that they're kinda working on where they're trying to sort of observe the standardization process. And one of the things that I'm kinda, like, curious about is, you know, like, okay. So Loguid is working at a much higher level. So when they, like they they standardize something, and then they put a favorability rating on, you know, a set of four, like, standard contracts that have been, like, through the sausage making factory. And that's, like, excellent for me as an economist. I'm not an economist, but, you know, like, wearing, like, a hat that looks like an economist one, because it's, it's exactly what I need to produce, you know, game theory game theory calculations. Right? So that level of extraction works really well for thinking about, like, strategic considerations, at the level of, like, where I'm trying to calculate games. The, no. I absolutely absolutely refuse to sort of accept that characterization. I am not an economist. But the, I guess, like, I I was literally just trying to, like, build some, like, graphics for this research project in order to and I wanted to sort of think about, like, you know, basically, long story short, where I started thinking about, like, how can I use because Loguid does have some prose objects, embedded in its representation of, you know, these clauses? Right? So certain things like this actor is lifted out, but it's definitely nowhere near as complex as the one that, you know, is demonstrating some of the examples that Jim, just just showed. And, you know, even at the where, like but the one that Lawgood presents, it's, like, it's hard for me as an external data scientist or, quote, unquote, economist to, like, really interact with that ontology, right, and to do anything appreciable with it. And literally, what I was gonna do is just sort of say, well, here are the number of pros objects which are exposed, in that given clause. I have no idea what they represent, but I'm gonna use that as some sort of proxy for the complexity of that clause. Right? And I'm wondering, like, you know, given that I mean no. I'm not saying that, you know, you should be, like, thinking that I am necessarily the consumer of, you know, these kinds of an ontologies and approaches to, like, organizing prose objects. But it doesn't definitely feels like, you know, there must be some trade off between, like, the complexity of these things and, like, the the depth of that, like, you know, logic tree or hierarchy tree of, like, different classifications. And, you know, well, it's usability. Right? So okay. That was a really long sort of input, but I'm kind of like I'm personally motivated by, like, how can I use more of these pros objects given that, like, people have spent a lot of time to use them and to build them, but I just find it, like, really kinda hard to actually use them? So I don't know

Speaker 2: if you got some tips or ideas about that. Yeah. Let let me jump into that in one in one direction. There are lots of different ways you can jump into that. One is this notion of context. So if you if two people want to do a transaction with one another, they could just use a handshake. But they could also go a little further, they could write some stuff down. But no matter how short the thing is that you write down, there's actually complexity in whatever it is that you're agreeing to do. And the question then becomes how much of that complexity do we work our way through proactively? That's what lawyers spend all all their time transaction lawyers, we spend all of our time talking to one another about horribles stuff that some stuff that might go wrong. And so, and the horribles are out there. They may not happen. One of the great tragedies is that we we spend all day talking about horribles that end up not happening. It's, it's sort of useless. It also poisons many negotiations. Another way of doing the context would be that you point at the context. And so if you just pointed out this non disclosure agreement or you pointed at a policy on on on handling of medical data. So Global Alliance for Genomics and Health is a fantastic vector for this stuff. If you just pointed out that then you'd get that context and that context if you take some of the global alliance examples goes actually back all the way to the treaties. So but you, but you're you don't have to hop right to the treaties and try and figure out what the heck the treaties say. You've got a series of hops. So you can you can start from your napkin which you've signed and you can go on to the to the URL and you can see what the deal points are and you can see what's the two parties agreed is specific to them and then you can hop to the next thing which is how is this thing, if we go back to the non disclosure agreement, how is this thing essentially filtered for a conversation this way or that way or a conversation about a customer list or a conversation about, actual deep technology or the, and then you can hop your way and eventually you'll get actually to the treaties. If you hop your way all the way down through the thing. So it's a way of providing context. So that you can focus on the deal points, focus on one another, lift your head up from the page and look at one another, but still have the benefit of all the bad stuff that's happened in the past and how people have found ways to manage that.

Speaker 3: So I guess you don't mind if I intervene. So hi, Josh. Nice to see you again. So one thing that fascinates me about Lawgood, I Liam is fantastic, and they're doing great work. But one thing that is important, I think, about Lawgood is that they were originally built for lawyers actually. Those who were already familiar with these ontologies that there's kind of no learning curve because they kind of already have that intuition. Part of what they're thinking about is I am a sort of fresh faced lawyer fresh out of law school. I am just trying to build my confidence here in terms of drafting a legal agreement. So they have these positions almost as signposts to give that extra encouragement almost as if I can have it verified by a senior partner and whatnot, but without actually having to ask them. And the other side of it is that they're kinda supporting from a market intelligence perspective to help these boutique law firms that don't have actually the manpower that these big law firms have. And so again, it's more a little bit more about kind of confidence building and assisting with a lot of this like work that big law firms already have the benefit because of the sheer manpower. So in some cases, kind of approaching it from a perspective that's outside of law, I can obviously see how that can be difficult. And so I guess it leads into the other question of if you are the user engaging with these kind of legal agreements, do you kind of take the perspective of one NDA? I'm not sure if you heard of that movement. It's kind of this big global movement towards standardizing NDAs. Is it that I am just tired and I don't want to interact with lawyers, I wanna just do it myself, so let's click and print or let's click and kind of send over an NDA that, you know, seems to be trusted? Or is it that you actually want to ease the process around drafting? That, I actually want to get at a deeper level of how do you negotiate in contracts? How do you engage from a decentralized perspective these types of, you know building a contract from the start. And I think those are kind of two separate questions. If it is a lot or you know like we're interested in kind of really getting into the nitty gritty about what we're negotiated while kind of being able to secure kind of what might be a legal issue going forward then I think it's very different than hey you know I just don't want lawyers involved I just want to find something that's easy to use and you know click and have it you know right unfold right in front of me. So I think maybe those are two different things that are interesting to be explored. I think what ProseOptics and what I hope kind of the direction is is is the latter where everyone is able to kind of take these building blocks and piece together something, and it's accessible for everyone, and legal information is just information. So that's kind of hopefully the direction, and I think part of what's important when engaging with building ontologies is the kind of initial, like, work involved in trying to clarify what is legal information and what is not. So I hope I hope that kind of provides, like, maybe a different angle to what Jim was mentioning.

Speaker 2: Yeah. Another way of putting some of that might be how much of a law firm could be rep could be substituted. How much of what you get by being at a large law firm could be substituted by having stuff up in Git on GitHub, Rarible, other places like that. And my guess is an awful lot of it.

Speaker 1: Yeah. So I'm gonna take the stack. I think we have Alan and then Seth just sort of closing at that that topic then. I mean, it sounds like, you know, there's a circumstance where one would be able to kinda put together their own thing and then just effectively submit it to their legal counsel for, you know, review prior to making it official rather than having to do lots of lots of narrow iterations administrated by a lawyer, which is what you experience in the current form of the business, at least what I've experienced as a CEO founder. So if that's cool, let's go to Alan and then Seth. Got about eight minutes.

Speaker 8: I I presume that's me. I'm sorry. I I came late the party. I don't see another Alan there. So Yes. Okay. I'm sorry. I don't have my camera on, but you're not missing much. So I'll just leave it off for now. So I just thought I'd I'd I I was I dropped in at the invitation of James, who very kindly invited me along. I I don't know a lot about the background to this, which is often the case with James and the things we do. So I parachuted in, but it's very similar to the the stuff we're doing. I'm familiar with the background. And, really, the observation I wanted to make is is that we are working with James to deploy this in construction, and we see this as a way of of bringing teeth to contracts with yes. Yes. Yeah. I like the fingers. Yep. Teeth. Teeth as in the cogs on the machine to the machinery contract so that we can begin to speed things up in speed things up in construction commercially and make them more efficient. So one of the big challenges in the construction industry is getting people paid on time. And to do that, people need to have contracts which the parties agree to, but in our case, contracts that we can operate on. And what we're hoping to do is is deploy changes methodology so that we can use distributed ledger technology. So we can pick out key aspects of the contract and have those key aspects trigger data and financial transactions. We think we're quite close to it. I think what James is doing is brilliant. It's the best I've seen. There's lots of other stuff flying around. It's sufficiently simple. And the thing that I think is very powerful about it is it it replicates the natural language contract, and that's the biggest challenge. We can't change the construction industry. It doesn't welcome change. So we're hoping this allows people to do what they've always done and use the contracts they've always used, but have those contracts used in a more intelligent way. And ultimately, we may deal with version control by deploying something called federated learning so we can begin to see how and where contracts have worked and not worked potentially. But that was my spiel. I'll just add that. I don't want to take up any more of the time.

Speaker 1: I appreciate the practicality of the specific industry. I wanna try to jump to Seth. We've got about five minutes.

Speaker 9: Thank you. Maybe this is a little bit of a wonky question. I'm active in the institutional grammar community, which is, you know, similar, trying to come up with computational formal constructs representing the plain text of written policies and regulations, less less laws, you know, rules and such. And so the, you know, their goals are quite different. The kind of data they work on is quite different. What they used to do is quite different. And yet there does seem to be a sort of a common core. I'm assuming you've had some kind of peek at this stuff. And I'd I'd really appreciate your kind of sense of maybe the redundancies or complementarities or or relative strengths of, you know, each approach to computational representations of sort of legal ish text.

Speaker 2: Yep. Yeah. Perfect question. And I dropped something into the chat relating to a the example was just clearing a paper check. The paper check being the thing that's right on the boundary between a payment and a agreement. So the way I so a comp let's yeah. Hard a hardcore computability requires algorithmic expression. But a hardcore, that's also deterministic. And therefore will be wrong in some respect. There'll be some piece something you hadn't thought about. The Nobel guys refer to it to this as incompleteness of contracts. That is there's always something that could go that you hadn't considered. And so a really good way of doing this, I think, is to embed those things in the graph. So in our non disclosure agreement, we example where we're connecting two parties to a non disclosure agreement, we would have notice interaction interactions under the non disclosure agreement and many of those could be expressed really quite totally algorithmically. If you wanna tell me something, then it it it happens this way. And there may be consequences of the thing that you told me. For instance, maybe you're telling me that you're about to discuss this with some other specified person. This leads us to the point that in lawyers are doing all kinds of stuff approximating, these kinds of things because we assume that the notice stuff is not gonna work well. But if you had a notice thing that worked well, and that's an obvious blockchain example, then, then you you could embed the code for doing that. And it may be that there are other parts of the interaction where you could also embed code that algorithmically does that. But if you also if two parties then decided that they needed to tweak something, whether it's tweak something in the text or tweak actually something in the code by overriding that code and using some variant on that code. They can do that directly in the PROSE Object Model. So I see these as comp as the the the code stuff in a way this enables the code stuff because it allows you to step out of it.

Speaker 1: So adaptivity by mutability, like basically responding to incompleteness with with adaptivity with basically proven mutability but provenance. That that sort of makes sense. I know we're pretty much at time, so I wanna do our little end of session ritual where we unmute and clap. I'm gonna be able to hang on for a few minutes if people wanna chat a bit more, but I I don't want to hold anyone hostage. So let's do the thank you now. So unmute, and we're gonna clap.

Speaker 5: Thank you. Thank you.

Speaker 1: Cool. Thanks very much for joining us. The recording will end up being up on the research seminars thing if anybody wants to follow-up. You're also welcome to join.