Speaker 1: Can you guys see my screen with the decentralized social thing, or are you still looking at my video?

Speaker 2: We can see. You're

Speaker 1: looking at the the panel? Okay. I mean, the the slides? Okay. Great. Okay. So, yeah. So I did this report on the state of decentralized social. And the first thing I wanna point out is that decentralization is actually a spectrum. So you have on one end, you have centralized services that are like Twitter and one company kinda controls everything. And on the other end, you have decentralized services where you have devices that participate both as, you know, in client and server roles in the network. And you might have something that's fully distributed and every device is functionally the same, or you might have something in between that's more federated or peer to peer with super nodes where you have, you know, maybe, you know, small nodes joining, like, single servers on their own domain or just single devices. And then you also have larger nodes that serve content and perform more functions in the network. So in thinking about the different kinds of forms of decentralization, there's those like network structural decentralization, and then a lot of social networks that to be decentralized or have decentralized component use blockchains. And so blockchains are something that get, you know, the properties of decentralization get argued about, but I think the clearest way to reason about it is that they are logically centralized, but politically and architecturally decentralized. And so the logical centralization means that you have this chain of blocks that is essentially functioning like a central database when you query it, and every single node is, full node, which is, you know, mining and maintaining this chain stores the whole history. So they, basically the whole consensus mechanism is there to make sure that the same database is stored on every node even though these are untrusted nodes that could be anybody. And so that means it's politically and architecturally decentralized because all these nodes are communicating peer to peer and politically not, there's no single entity that controls them. And so this makes them useful for things that require a centralized database basically, like human readable names, but are really harder to do in a decentralized way without a central administrator. So in the report, I covered all these federated protocols and applications as well as peer to peer applications and some blockchain social applications. And kind of as a broad level overview here, I won't go too deeply into each one, but this diagram I made of the space is useful for understanding how the federated protocols work and fit together and more so for the peer to peer ones, which are more divided at different layers of the stack here. So federated applications basically separate the user facing applications which are on the client as we know when we interact with most centralized software, and then the rest of the functions take place on the server. So your server will manage your user identity and all your user data. And the networking, of course, is not something that user has to pay attention to. And so some of the earliest examples of this are things like XMPP, also actually email and, like, Usenet or federated systems. Like, email is super successful, of course, and anyone can run an email server, but so it's an open protocol, but we kind of centralized around a few client side applications and providers that provide really good user experience. So I think it's interesting to look at that as an example of what a federated social protocol for, you know, different kinds of media might evolve into. And then we have newer iterations here like Matrix, which is kind of sees itself, I think, as an updated XMPP, but handles more use cases. Matrix is interesting here because it actually borrows a bit from the peer to peer space design, and the data structure it uses is sort of Git inspired. And so it's more flexible around the kind of data you can move around. And so right now, it's designed around chat elements like, Element is as similar to Discord and Slack, but you can also build new applications on it that are maybe more like Twitter because you can just change the kind of data you put in there. So different people have been trying that recently. Diaspora was an attempt to build a kind of Facebook Twitter competitor, and it's still going. And it's the protocol and the application have the same name, so I put them in one stack here. Activity pub was a a protocol that was created by the w three c social working group, and Mastodon, which was a attempt to build a federated Twitter, started out using another protocol, and then they adopted ActivityPub, making it very prominent after the million several million Mastodon users converted to using it. And then Solid is a project mainly spearheaded by Tim Berners Lee, the creator of the original web protocols. So there's a lot of credibility there. It hasn't seen that much user facing application adoption yet, but the basic idea is that users data are organized into pods that applications request access to. And so this, you know, tries to shift things towards more privacy and user agency preserving model. So looking more at the peer to peer side now, that I think I I made this division and this distinction in my mind because that's very different kind of, structure to these kinds of protocols. And so the federated ones are many ways more easy to understand because they have this familiar client server interface. It's just that you might join a different server than the Twitter server and, like, have a different back end. But here, the peer to peer ones require many new user behaviors. So users generally have to learn how to manage their own keys or deal with other aspects of the peer to peer ecosystem. Like, we have to pay attention sometimes to, like, you know, who they're connected to in the network, and that determines what data they're going to get. So looking at these protocols here, the IPFS ecosystem is fairly complicated, and there's protocols built on top of some pieces of the IPFS protocols. So I wanted to make that distinction here. For example, PureGOS is an encrypted file storage and social protocol, which adds an encrypted identity and data layer to IPFS. And IPFS is a kind of a suite of protocols, which creates in the whole a distributed file system, but also the pieces can kind of be taken out and used in other projects. And so at the data layer, IPFS has a library called IPLD, and then that's used to construct a lot of other applications that might not use the full networking stack. And then the networking layer, it uses the p two p, which other applications like Ethereum have started using for just the networking part and not for anything else. And then over here on other smaller protocols that probably have less adoption but are still relevant to the decentralized social space, there's Hypercore, which was formerly known as DAT, which is also similar to IPFS, a distributed file system, but it's organized around user keys as opposed to more around individual, content as IPFS is. And so people have built some social applications using this, like, Cabal, which is similar to Slack, I think, like a chat app. And then there's SecureScuttlebutt, which was a distributed peer to peer social protocol designed explicitly for social networking. And so the applications that have built on this follow the very peer to peer design where the data you're getting through the network is only from peers you're connected to. And so I wouldn't have a full view of the entire SkillBlank network. I would only know who are the people I'm connected to. Gun is a peer to peer database, which also has some social stuff built on top. There's Iris as well as Maskbook. Iris does some interesting web of trust stuff. And then there's Aether, which is a decentralized Reddit, which also is the name of the protocol where the protocol's name is MIM. And it's basically I put it just as one stack because there's not other applications using MIM. It's just Aether. Oh, sorry. That is an unfinished slide. The this is an unfinished slide, but I'll show it anyways because I was having a hard time sorting out, the new categories of Blockchain social networks because when I wrote about this originally, I was breaking them down in terms of, applications that use Blockchains for data storage and ones that use them for monetization. And so some applications might be centralized apps, architecturally, but they have a blockchain, currency or, like, a cryptocurrency in there for monetization. And so they say they're decentralized. Others put literally everything on the blockchain, including user identities and, you know, all the content passing through. And then that is, you know, very decentralized in a way because everything is on the blockchain, but also very logically centralized because all the content is on an immutable ledger forever. And so I think that's a kind of strange design that hopefully people stop doing also because blockchains aren't super scalable right now. But then some interesting stuff that people have started doing more recently, and I wasn't sure how to sort through it because it's, not like these examples aren't don't have a lot of user traction yet, but it's interesting to think about particularly in the context of governance that people are using blockchain projects now for identity, titling and governance. And so for the titling, I would say this is covers like NFTs, which are kind of a social app and that people are starting to build social applications around them. And so they use a blockchain to record ownership of a non fungible token, just basically just like a a hash of a piece of content stored on the blockchain somewhere. And then, basically, right now, it's centralized applications, helping users discover these and interact with each other. And then, for identity, there's projects that have started doing usernames or other things, like, based around, you know, domain names on the blockchain. And so those kinds of social networks are starting to use blockchains for naming, which is, I think, a promising direction for use case. And then others are using blockchain tokens for governance purposes. So there's a writing protocol that gave, new users a token in order to vote on who's allowed to use the platform next. So they're trying to do an exclusive clubhouse style invite, but only with people with access to a certain token. And then maybe in the future that token token holders will have more voting rights or things like that. And so, those are all examples of different ways projects have tried to use blockchains to, help fix some of the problems in decentralized social, and I am not quite sure how to depict this whole ecosystem yet. Also some of that wasn't in the original report. So touching on some topics they did put in the original report, I wanted to talk about identity discovery, moderation, and monetization. And, since I saw I arrived late, I'll try to just go through this a bit quickly. So on the identity side, I think when particularly if we think about this from a framing of governance, it's really important to just think about who controls the identities, and like where do the points of control reside. And so in federated systems, it's the servers. And if I sign up, for example, at Mastodon Social, the biggest instance, my identity is now tied to that server. And if I move, I'm going to have to redirect my identity, or if my server goes down, I'm going to lose my identity. So I think this is one of the biggest problems with existing federated networks is they don't have portable identities, and identities aren't truly decentralized. They're tied to the servers you sign up to. And so I think new directions in federated networks are trying to decentralize the identity component or at least make it portable across servers because that's a big usability hurdle. For peer to peer users, you have decentralized identities that the user controls, but then often this requires key management because what the user controls is a public key that is uniquely them, and human readable names are often not attached to that. So in Scuttlebutt, my identity is this public key right here, which is clearly I can't tell that to a friend. So I have a nickname, Jay, but then anyone else can also nickname themselves Jay, and then the only way to distinguish is to see, like, who I'm connected to and, like, what I've posted. So it's not an extremely, you know, unique human use readable username. Blockchain based identities kind of get around some of these problems. And the way to think about this is it kind of might provide a solution to Zippo's triangle, which is a statement that naming systems can only ever have two out of three properties of secure, human, meaningful, or decentralized. And blockchains kind of cheat on the decentralized part because they are logically centralized, but then they're politically and architecturally decentralized. And so you can get something that maybe gives you a unique name, but there's not one entity controlling it because this whole network of all these blockchain nodes mining are controlling it. DIDs, decentralized identifiers are a concept that's been worked on in the W3C working groups recently, and it's turning into a spec that's getting some adoption. And that was inspired out of blockchain naming systems, and the idea is to have a layer of abstraction above the ledger. So you might have like DID colon Bitcoin or even, you know, name of random ledger and then colon the, actual identifier. And then that might let you specify a method and a way of retrieving the identity from whatever ledger you've stored it on, and maybe you could just use DIDs under the hood and let people store things on different ledgers. Discovery is one of those things that is also control shifts around when you no longer have a central authority, where everything passes through in the network. So in federated systems, you have your local server, but then where how do you find out what people are posting on other servers? Often, it's just who you're connected to or who people on your server are connected to. So if I'm on a small Mastodon instance, I'm only seeing stuff that, you know, me and other people I know on the server are connected to and other parts of the network might be invisible to me. So you could have aggregators that go in and, you know, pull everything, but, that doesn't exist yet. And I think for various reasons, ways I've been thinking about it, and the reason I put this cupcake here is people complain a lot about algorithmic feeds and, like, these feeds pushing too much addictive content to us, which is, you know, analogous to, like, refined sugar, just very addictive and bad for us. But actually, I think discovery and, like, good content curation is really important. And if done well, it's something that can be, you know, sweet but good for you, like fruits. You know, it's something that you have some control over and isn't, you know, thoroughly toxic and addictive, but it still has and there's still, like, some engineering work required to make that a good feature. And so I think some of the different approaches projects have taken is local is better, which is Scuttlebutt's philosophy, which is just giving up on having a global aggregator for everything and just saying, you know, it's better to just see content that your friends show you and that your friends are friends, and we don't really need to see stuff from across the world that's, like, maybe a different social network does that. We don't do that. Another version is to share everything. So for example, a third, every node has all the content in the network, and they deal with pruning the past by dropping old content that's been there, say, more than six months without anyone referencing it. But this is still kind of, you know, intensive, and then sometimes people complain about having content they don't want on the local computer that like they would have moderated off of their forums. And so trying to discover governance processes around only storing content you want on your computer in this share everything model. Then there's a blockchain as a global database approach where basically, you know, see these blockchain apps that use the blockchain as the database for all the content. They just store all of it on there, and it's really questionable whether that scales or whether it's desirable to have, you know, content that you can't ever erase or change. Like, Peepeth is an app that writes everything directly to the blockchain. And if you wanna you have a typo or you later wanna delete something, it's too bad. It's out there forever. It's just on the blockchain forever. Like, maybe the interface can drop it, but it's always gonna be there. So I think something that's really missing in this space is search engines and recommendation engines, and an open question is how to do these in a decentralized way. Because if you think about how a federated system like email has evolved, or even a federated protocol like the web itself, you've ended up with Google and Gmail, which are very large centralized providers. So I think it's very likely that we end up in a situation where you have centralized, very large search engines that would search the whole peer to peer web and have really great search, but, you know, reach a dominant market position that way. And so decentralized search engines are, you know, a problem unto themselves and how do you build a decentralized index and maintain it. And I don't know if that's actually, you know, the point of decentralizing decentralized social here is to, like, have everything be decentralized. Maybe you just wanna decentralize, say, user identities or something and give users more freedom. And, you know, if there's enough adoption that large centralized services emerge as search engines, that's a great case because, you know, at least users are now free to migrate. Moderation is another thing that control shifts around. So you can have different levels of control here. Many services, of course, let users do things like block, mute, upvote, downvote. Communities, at the community level can have, you know, admins for servers or, you know, elections for moderators or admins, and they can maintain block lists for the users and help to filter some content for the users. But, overall, I think the space of moderation tooling for decentralized social is still underdeveloped because these problems really emerge at scale, and the only networks that have really hit the scale at which really bad behavior merges are Mastodon and Matrix. And so they've done a lot of work on this, and then peer to peer systems are trying to figure out what works for them at the stages they're at, which is, like, still focusing a lot on user adoption, I think. So there's third party tooling and automation, which Mastodon had to add to deal with some harassment. They added some moderation APIs that would let third parties build more moderation tooling to help out server admins who are just being overwhelmed by all the cases they had to handle. And then there's relative reputation systems, which I think you could classify things like webs of trust and, you know, subjective reputation scores in this. And so these are the systems that, you know, might calculate the reputation of someone in the network depending on your network position. And this kind of subjective view of reputation actually makes a lot of sense in decentralized social networks because there's no no objective central entity you can rely on to say this person or this entity provides the, you know, final reputation score for whatever I'm looking at. I think machine learning solutions are underexplored because there's, you know, the way Gmail provides really great spam filters and stuff, they're training on tons of data that they have because they're such a large entity. And there's, I think there's both a lack of large entities with tons of data and the maybe the funding, to implement some of this stuff. And so I think you could definitely have, you know, spam filters or moderation solutions that, train on large datasets, maybe in some privacy preserving way in a decentralized social network, but this would kind of be a research frontier. And then there's economic incentives, which a lot of blockchain projects have experimented with, like, economic incentives and disincentives for, posting content. And so that turns into a moderation tool sometimes where you can, you know, economically punish people, like, deduct tokens or something if they present stuff if they post stuff that's undesirable or downloaded too much. Or you can use economic incentives as a way to, like, gatekeep and, you know, only let certain people in, or just as, like, a small deterrent to spamming. So Ather just has users calculate a small computation before they post every single post, and that just means that a spammer trying to, like, flood the network has to do some computation in order to do so, and it makes it a little bit expensive for them at the computing power level. I think one thing that moderation always comes down to in decentralized social networks is just lists. Like you have end up with block lists and allow lists, controlling which servers you're going to access or, like, what users you're going to access or ban. And And I think this is the kind of, final tool in the toolbox when everything else fails. But seeing how everyone kinda falls back on it when faced with challenges, maybe it's worth thinking about designing how to design these upfront in a in a better way because when something really bad happens, like, say, Gab joined the Mastodon network, there's always this kind of scramble to think about how you can combat this in a decentralized social network. And Gab ended up coming up with the Mastodon oh, sorry. Mastodon ended up coming up with the Mastodon server covenant, which, excluded servers who didn't comply to their, rules from the Mastodon homepage. So, of course, they can still speak the protocol and communicate with each other, but other servers are discouraged from connecting to them, and they're no longer on the home page. So this is an example of, you know, things you might think of upfront, in terms of doing blockless monoliths. Monetization, I think there's a lot of options here. I probably won't get into them, but the categories I've thought about it is selling information, processing payments, or selling namespaces. And these are kind of the categories at which business models might emerge. Also, there's probably application layer business models, which happen more on the client side or the user facing side. And then there's, like, service provider business models, which might happen in federated systems on the server. And then there's maybe protocol level monetization models, which some of the blockchain ones fall in this category where there's maybe a native token or something like that, and those are much more experimental. Yeah. And then I just like to leave some open questions, which is, is there a decentralized identity standard everyone can agree on? I think that's one thing we're still looking for in this ecosystem. How do you discover great content in a decentralized network? Like, what kind of search engines or indexers or aggregators could emerge? Can decentralized communities handle moderation better than centralized communities, at scale? And what are some sustainable business models that will power the future wave of decentralized social applications? Thank you.

Speaker 3: Thanks so much. I'm gonna jump straight into questions because I know we

Speaker 2: Yeah.

Speaker 3: Are a little bit short on time. Everyone feel free to kind of throw your questions in the chat. I'll try to go through them on a kind of Q esque basis. The first few are from Seth. So the first question is, you know, publishing this report might have brought a bunch of other initiatives out of the bushes. Has your picture evolved since the report went live in terms of domain platform or tech that might have shown up on your radar?

Speaker 1: In in terms of domain what?

Speaker 3: Platforms or technology that you weren't able to cover or discovered afterwards, I guess. And has that shifted your view of the overall ecosystem?

Speaker 1: Yeah. Some of the the unfinished slide with the blockchain social stuff is a new area which has changed more in recent years. I I mean, I was a cryptocurrency developer, like, you know, a few years ago and watching the 2017 ICO boom, which suddenly brought a ton of new decentralized social networks onto the scene. Some of them were interesting and legit. Some of them were just total scams. And, there were so many of them that emerged. It was hard to keep track of and, like, filter out the signal from the noise. And I think this happens in every bull market. And now that we're in another crypto bull market, tons of new experiments are emerging. And again, some of them are really interesting and have interesting mechanisms. Some of them seem kinda spammy. So it's hard to filter out through all that and categorize the new dimensions. But, like, last time I think there were just ones that used blockchains for data storage, ones that used them for monetization. And now I'm seeing more examples of ones that use them for identity, ones that use them for like titling for virtual goods like NFTs, and, ones that use them for, you know, governance mechanisms. And I think I've also changed my thinking a bit on this dimension. Like I started thinking of, MetaMask, which is a popular browser extension wallet as an example of a decentralized social identity provider. Because they actually let you do just like login with your Ethereum address to all these decentralized applications. And imagining if that address were actually more of a username with user data, then suddenly you can imagine how, like, a centralized social ecosystem might work across a lot of apps with, like, a browser based decentralized login.

Speaker 3: That makes sense. I think it segues really well into the next question, which is, you know, within you mentioned some of these projects are have have targeted uses of centralization or end up kind of being built on decentralized protocols, but are sort of centralized in execution. Are there any specific targeted uses of centralization that you think are especially sharp from Seth? And I wanted to also add on to that any examples of sort of decentralized governance within very centralized projects, and if if there are real successes there.

Speaker 1: What was the question the first part of the question? Something about

Speaker 3: any targeted specific uses of centralization that you think work really well for, you you know, in this larger umbrella of decentralized projects?

Speaker 1: Yeah. I I think points of centralization always emerge and things like, you know, centralized spam filters or, block lists for spammers, like, seeing, like, how you do how this happens in email seems like it's a useful strategy to have that ecosystem where there's centralized, you know, spamless providers, but it's decentralized in the sense that there can be many of them. Also, definitely, governance of a lot of these projects is rather centralized. And so there's, like, you know, there's companies or nonprofits that build these, but generally, your control of them is fairly centralized. There might be a large community, but when it comes down to it, if, like, you removed the central company or nonprofit, a lot of the development and, you know, just accumulated knowledge required to build and maintain these protocols would go away, and I don't know how well they would do. So I think if you look at the actual governance processes, it's one thing where I think there's a mistake people think you have to build a decentralized protocol with a decentralized team. And sometimes that works, but it it's just a totally different process. Like, you can totally build a viable decentralized protocol with a small centralized team. Or, you know, often there's a a benevolent dictator for life and open source projects, and that's basically very centralized because they're just one person building and controlling everything. And a company is just like an extension of that.

Speaker 3: Yeah. Going off of that, and this might be a slightly selfish question to ask because my team at Microsoft is also looking at this. But, you know, I know this report kind of came out of some of the blue sky work at Twitter, and I'm wondering what you think the role of major private actors is in this space assuming, you know, good intentions, but also sometimes misaligned incentives. Or what does it look like to either support these protocols or try to build out the kind of blue sky system that Twitter is aiming to do, but it's still pretty up in the air in a lot of senses. So we'd love to hear your thoughts on that.

Speaker 1: I mean, I think it's definitely worth looking at both from a business perspective and from a sense of just, you know, looking out for disruptive innovation that might, you know, change the whole paradigm in the future. Like, I think one thing that the part I skimmed over with modernization of business models, one thing I think that these decentralized social platforms are all missing is a very sticky business model. But once that emerges, I think it'll really fuel a takeoff of a lot of this. And so I think, you know, the explorations that Twitter is doing and also I think Facebook with Libra, even though it's a different angle, is, like, you know, exploring some of this stuff. And I think, there's potential here for this to be really, a different paradigm for how social interactions would work on the Internet. And if you think about the history of it, maybe there was a missed opportunity early on to, like, build in individual social identities to, like, a core web protocol. It was just, like, it's too hard to figure out and, like, attempts, like, OpenID, over the years have, like, you know, kind of made different approaches to it, and we've ended up with a system where, like, now Google and Facebook are your identity providers, essentially. And so I think, like, one thing that these companies could think about is just how does how do you still have a business model when, like, you know, your identity might not be controlled by this company? So, like, if you let go of identity and maybe some user data, can you still build a viable business model? I think that there is definitely is an answer there because Google, for example, doesn't necessarily have to own user identities, but they still built a very powerful search engine on a decentralized protocol. And so I think existing companies like Twitter, for example, which and if you think about Twitter decentralized, what role would Twitter the company play? I think they're already a aggregator of content across the whole network, and they might be able to continue to play that role. So I think it makes sense for them to be, like, a first mover and accelerator of this kind of ecosystem.

Speaker 3: That makes sense. I I think, Brad, I'll go back to your question, but that goes to Martin's question on well, given these potential business models, who wouldn't and should benefit in a decentralized protocol from the money made on that protocol? And how does that change, I guess, given who would be sponsoring and with the involvement of both something like Twitter or Facebook?

Speaker 1: I mean, I think it's a question now of, like, who who really can figure out a business model at what level in the protocol, like, at the application level, the protocol, or the service provider level. I think, you know, if one part of that is able to capture value and the others are not, then that part would probably grow more. One thing I've seen, you know, like, communities like Mastodon have done pretty well just self funding their own servers and, like, you know, doing a Patreon to fund the development. And a lot of this is donation based, which shows that there's real a real community demand for it. And so maybe people could, like, fund their own home servers without any business models just because it's, like, a community resource. There can be this mix of kind of, like, public private funding for this stuff. But then maybe some larger, more commercial type applications, like, you know, really advanced spam filtering and, like, good search and curation. You're gonna need more engineering for that than just running a home server with, like, a volunteer admin. And so I think business models for that part of it, the stuff that needs more engineering work is essential to get right in order to, like, build the positive feedback loop that would get more investment in user adoption.

Speaker 3: That makes sense. Joseph asked if we could go back to the previous slide on open questions and and while you're doing that, Brad, I don't know if you wanna kind of summarize and just unmute and ask your question.

Speaker 2: Sure. I guess my my question is geared more towards what would a stake based communication with users look like along the pseudo anonymous platform if you were to sort of pay to get out of someone's DMs in order to communicate with them? Is that a form of preventing, Or is that a form of creating nonviolent communication in your own communities? Is that a way to keep unnecessary communication out of your current organized groups, or or do you see flaws in that current system?

Speaker 1: You said state based. Do you mean, like, nation states interacting with people? Or and then you also mentioned, like, paying to DM people. You're talking about the economic incentives or, like, nation states?

Speaker 2: Sure. The the economic incentives.

Speaker 1: Okay. Yeah. That wasn't that's a good point. That's nothing I didn't mention, but, like, that's an idea for how to prevent people from DMing you in a decentralized way is to just, like, require a fee, and then maybe you can block them if you don't like their message or something like that. And that could cut down on, like, random spammers because right now, the platforms put some throttling on that, and you wouldn't have that in a centralized network. This is an example of one of those things that a lot of the peer to peer things haven't really encountered at huge scale, like, they're not large enough for spammers to severely target, I think. But when you're thinking about how do you do it at scale, yeah, how do you slow it down? I think also, federated systems have it easier because you have a server admin who can protect you from spam. So, like, you're blocking stuff at the server level. And so you peer to peer ones, networks are more kind of everyone for themselves and that you don't have any points of control much beyond, like, the the user node. Whereas in federated ones, it's organized more around communities, and then users choose the communities they opt into. And then those communities can put controls in at the community and server level. So, like, you might opt into a server that has the moderation policies you like. Like, maybe you don't want strangers to DM you ever, and your server just doesn't let strangers do that. Like, that would be one option, or you could have this, like, economic mechanism or things like that.

Speaker 3: Based on that, I mean, we've had a a bunch of conversations in this group recently on different types of moderation from different angles. Joseph asked what you think the comparative advantages are for centralized versus decentralized approaches to moderation. I think also kind of off Bradford's question on stake. Do you think, you know, there should be a more formalized role for moderators even in terms of having a stake in the network or something like that? Like, what are the different ways that you've seen this be successful?

Speaker 1: I think decentralized moderation is, I think there's two ways I think about it. There's tooling for decentralized moderation and then there's like the social architecture for decentralized moderation. And you can test the social architecture of decentralized moderation in existing centralized sites like Reddit or other ones where you delegate more control to communities. I think Twitter's bird watch experiment is also an attempt to do this where they give, users and community members more ability to, like, fact check things in a distributed way. And so I think you can, like, pioneer a lot of that research now with existing sites and just, like, try different user interfaces. It's more that the tooling for decentralized moderation, then you have to think about, you know, what specific, affordances do you have in different networks. And so, like, peer to peer ones, give you, you know, I think a more restricted set of ways to handle moderation than, like, federated ones because you don't have that, like, server level control. So, yeah, I think I've been thinking more about tooling specifically because it is something that you, you can't just research given the existing set of platforms.

Speaker 3: On that, and I'll open it up for anyone to kinda unmute and ask questions. We only have a few minutes left and we don't have any other questions in the chat. But in the absence of that, I will ask a question which is I'm wondering what your thoughts are in terms of a DID or decentralized ID standard that everyone can agree to use. There's obviously a bunch of kind of questions around proof of work and proof of stake as being inherently kind of, what's the word, centralizing types of doing identity within blockchain networks. There's, like, new work on proof of personhood. I wasn't able to read the report super in-depth on this part, but was wondering what your thoughts are on the intersection between something like proof of personhood protocols and, like, one of the major issues in that space is none of them can currently scale. A lot of them are built on these web of trust models that are just having a really hard time reasonably scaling and having a hard time kind of attaching themselves to social networks meaningfully. So if you had any thoughts on that intersection.

Speaker 1: Yeah. I think, there's DIDs are still in development. I know there's, like, a actually a Microsoft research group that's doing some work on it. Yeah. And I think it's a a promising direction but one thing that I think might be missing is like, what is the user interfaces? Like how do users interact

Speaker 2: with it?

Speaker 1: And then there's also the key management problem which is a really fundamental usability challenge. And that's still kind of unsolved in I think, you know, the rest of the blockchain space. And, so improving on key management solutions and then also ways that users might interact with DIDs. One promising direction, I think, is through the browser extension. I was actually looking at Microsoft's, like, DID browser extension recently. It's like a prototype that seems promising. And some way to interact with different applications that don't require you to reinvent the wheel with every single application is something that would be super useful and enable the rest of the ecosystem. So in many ways, I think figuring out the decentralized ID is a problem that stands alone. And then once you have that, then you can build, you know, decentralized Twitter, TikTok, you know, YouTube, whatever that just uses the decentralized ID and plugs into that system.

Speaker 3: Yeah. We should talk about this more because I think the major issue with DID is even, Microsoft, but generally is not having a super concrete use case to say, like, here's why DID is adding value to your life. Here's why it's easy to use, etcetera, and and really figuring out how to build that seems like the way forward. But anyway

Speaker 1: One more thing is I was thinking, like, if you could just add a DID to MetaMask right now, would that enable more applications? Like, that's been a thought experiment for

Speaker 3: me. Yeah. Ah, that's really cool. Okay. Well, I wanna give anyone else a chance to ask a question in the last minute. Otherwise, if if you could join me in unmuting and and thanking Jay for coming. I hope we can have a follow-up conversation here because I think there's a ton, you know, that you mentioned that we'd love to dig more into. And in the meanwhile, I don't know if you already have an invite to this Slack, but I'll send you one today if you wanna complete a conversation there. Yeah.

Speaker 1: Thank you. Sorry for the disorganization today.

Speaker 3: Oh, not at all. Great. Well, if everyone can join me in unmuting and and applauding. Thanks so much.

Speaker 2: Thank you.

Speaker 3: I I wanna give everyone a a chance to kinda continue the conversation if you can stay, but I unfortunately have to leave. So I don't know if there's someone who wants to take over hosting. Otherwise, I'll I'll end the meeting. Okay. Great. Thanks so much.