Speaker 1: Cool. You guys see my screen?

Speaker 2: Yes. We do.

Speaker 1: Alright. Well, nice to see so many of you guys. I mean, this is really cool full circle project, you know, to present with you guys because, you know, Eyes is really born out of the negative community. And so it's so cool to, you know, come back here, see so many familiar faces. So yeah. I'm Tyler. I'm the founder of Eyes. Eyes is all about collective process, and we will talk about what that means shortly. But let's go through a little short agenda. So we'll do some slides. We'll go through a short demo, and then we'll if we have time, time permitting, play together. So we use Eyes together, visit the next phase of Eyes, do a q and a. Alright. So the core premise of Eyes is that cognitive overload is the central problem of online collaboration. And I guess in, like, initial context to really ground this. So the idea of Eyes really started I think it's been, like, three or four years ago, and I I was living a double life. I was, in the Medigov and DAO community. And then also I was in this kind of group of artists, activists, building a nonprofit in a way. And so I was, like, being in, like, the DAO and Medigov community, people were talking about these exotic coordination mechanisms, being able to put everything on chain, this, like, really deep research in theory into what makes good governance. But then meanwhile meanwhile, I was building this nonprofit with me and my artist activist friends, and and I was trying to bring some of these concepts I was learning from MediGov and just the greater web three community into my group of friends, and they absolutely hated it. Right? It just sounded felt very bureaucratic. It was, like, a lot of administrative overload, and these were all people who were working, you know, multiple jobs. They're really passionate about what they were doing. It was just, like, even the concept of having a proposal saying it or saying that you're voting on someone, seemed to really rob the joy out of what was, like, this really grasp or this really passionate effort and make it something feel really bureaucratic and, honestly, just, like, really difficult. And in addition, we were using things like Discord where people are easily getting lost in, like, what's actually going on. And so I was realizing, like, not only does our concepts about governance often not really map out onto these kind of real world context, especially in people who are not technical or governance savvy, but I was seeing the same things problems within both the Medigap community itself. Right? We're often overwhelmed by all the Slack channels and things happening in our community, and really any other context to this in a web two startup and a web three DAO. People are overwhelmed. Right? And that really kind of forwards our best efforts at these more sophisticated governance coordination systems. And so there's a lot of reasons why that's the case. Right? I the reality is just like online collaboration is super messy, and it's messy for a few different reasons that are very inherent in how online collaboration works. The first is that is teams. So we're spread across multiple teams. They're all using different communication platforms. Right? So you might be in Medigov, Slack, might be in your company's Discord. You're being a few other Telegram channels. And we're often having to coordinate in ways that cross these organizational boundaries. So that's one layer of complexity. A second layer of complexity is that we're spread across from our tools. So all of the top context you need to make a decision or make sense of a situation is often sprinkled across different tools and platforms. And often you need to take collection act you need to take action collectively across multiple tools at the same time. And And finally, we're spread across time. Right? So our collaboration is primarily async. We're sprinkled across the globe, and our needs are quickly changing as, as, you know, the situation changes. So that's all to say is that this is a lot of ways that our context is spread very, very, very thin, and it's not our fault if we think that we can't really keep up with everything. It's actually an impossible task. And there's a reason why our governance coordination mechanisms really fall flat when we put them into the real world because you're putting them on people who are overwhelmed and unable to actually track what's going on. And that's a recipe for failure. So, like, it doesn't matter how, well thought out your governance system is. It doesn't matter if it's on chain. If it's not usable, it doesn't really matter. People aren't gonna use it. And so if you need to solve this, tension problem, if you're gonna have any shot and, you know, making the tools that we talked about in MediGov, really a reality that impeccable allows. So the way EIS approaches this chaos is using collective process. And so by using process, you can tie together all of this fragmentation between your tools, your teams, and time into something coherent. And the way it does that is through this process engine. This process engine is a way of both defining process then automating it as well. So this process can tie together multiple teams or spread across on different platforms, whether it be your Slack, your Discord, theory, and NFTs. Ties together tools. So action across different web two and web three tools, like, cool calendar, OpenAI, and GitHub. And then time, it's a way of, not just defining process, but defining how process changes over time. Okay. So what is this process, and what does that look like? So every process has a common form, and this can really apply to any kind of process. And this is a really key insight of eyes is that all of the the regardless of whether you're deciding or coming to a shared understanding, that all has a a similar form. And that form is that there's a trigger. Someone starts a process, and that could be from Slack or their Discord or Telegram, then there's a response, and maybe that's a vote. It could be a free text response. Maybe it's a ranking. Maybe you're submitting a picture, and then you have a result where maybe you're it's a decision, an AI summary. Maybe you're generating a video with Sora. Right? Maybe it's a a Canvas Miro style. Right? It can be really be any kind of artifact. And then finally, there's an action. You do something up to that result. And so maybe that's approving a poll request in GitHub or creating an event in Google Calendar. Right? So that's all to say that you can really any of the processes that we talked about in MediGov, you can model with an eyes flow. And so it's extremely flexible. It's essentially a language for defining process and it's very flexible. So So even though it's, like, infinitely flexible, it's really important that on the end user experience is super, super simple. Right? And that's really the core tension of ours. It's like, how do you get infinite configurability so you can design any kind of process because there's really this long tail of needs in terms of how we coordinate together. You have to, give people a lot of flexibility. But the use end user experience needs to be super, super simple. And the way that ISE works is that it's not just like another app that you need to download and participate can participate natively wherever your team works. So, for example, in Telegram, that's where we've first built the integration. And then you have this transparent log of both what happened in the past and then how you take action in the future. So IS flows are evolutionary bottoms up. They're they're built to change. Right? So a lot of times we think about governance systems, especially in the web three world that people say, oh, we do compound style governance or we do optimistic governance here. Right? Wherein eyes, it's like, no. You're not actually supposed to know the right governance system to begin with. That's something you iterate it into. Right? And so eyes is optimized for iteration. You start off with one thing. Maybe you're a benevolent dictatorship to begin with, and then you transition to a direct democracy and then a few turkey. Right? Like, you can do you could change things as your needs arise. But, crucially, this isn't an admin who's changing things behind the scenes and making it set up for everybody. Processes evolved through yet more collaborative process. So in eyes, there is no admin at all. There's that's not a concept that exists here, which makes this very different from other kinds of software. It's only collaborative process. And you'll we'll show how that works in a second here. And then finally, you can with eyes is essentially this a way of slapping on a coordination layer onto otherwise hierarchical tools. Right? So you can turn an existing Slack group or Telegram into these self government organisms. You can add a coordination layer onto otherwise admin control tools. Okay. So the things that we're building for right now is the first big experiment is AI sense making with the hats protocol. And so HATS, if you guys aren't familiar, it's, on chain roles. They've actually presented here at at MediGov seminar as well. And so we're essentially using eyes as a way of replacing, their governance forum. So a lot of people use discourse and instead doing kind of an AI sense making lightweight governance flows through Eyes. Another thing we're experimenting with is community run social media feeds on Blue Sky. So actually changing all having all curation of a feed entirely controlled and moderated by a community transparently through us. Community run calendars, activists across the org or the nation. And, finally, AI agent governance. So actually changing who these agents are, what they do, the task they have, the prompts that they they're they're given. Let me talk about that more later as well. Alright. So the vision of of Eyes right now, like, I'm the only person building Eyes, but there's a very big vision of, like, what this needs to become pretty successful. It's gonna be an open source ecosystem of plug ins for novel coordination mechanisms. Right? So a lot of these things we talk about, in in Medigov, you can actually quickly prototype. You can create a GitHub repo, plug it into IS directly, and actually test out these kind of novel ways of governing ourselves. Integrations across hundreds of web p web three tools and then cryptographically verifiable process execution. Alright. So that was a lot of words. Let's go into the demo. Right. You guys still see my screen? Alright. Okay. So we're gonna go through a flow today. And when we talk about process, I call that a flow within eyes. And so this one is very simple. It's actually pretty similar to what we're gonna be doing for HAT's protocol. It's discussing and approving a proposal. Right? That works a little differently from a normal normal forum, and we'll talk about that. So let's talk about the anatomy of this flow. Just like we talked about before, every flow has a similar structure. So this one has a trigger, and in this case, this Telegram group can trigger this this flow. And it adds you add some context to the flow when you start. So you you describe the proposal that you're you wanna discuss. And then we go to the next step. And in this step, we have a we create consensus with AI. So we're trying to come to a shared understanding together of, like, hey. What do we actually all think about this? Actually sorry. Let me send out a link because I want you guys to join this Telegram group if you have Telegram. Because we can actually all participate in this together. Where's the chat? Alright. So I just dropped it in the chat. So feel free to join that, and then we will, yeah, we'll be able to play around with this live. Okay. So that you alright. So we have a trigger. We're going to create consensus via

Speaker 2: I'm in the chat.

Speaker 1: You didn't go through? Just send us a direct message. Alright. Here we go.

Speaker 2: Got it.

Speaker 1: Okay. Cool. Okay. So the anatomy of this flow. So we have this trigger. The next step, we're we're using, AI to do a shared understanding of, like, what do we think about this proposal? And then finally, once everyone has kind of said their piece, we bring it in for a vote. I made this a little bit special in that we we can approve it with two votes, but we can actually just reject it with one. Right? So it's like a you get an automatic veto for just one vote. Anyone can veto this. Alright. So let's show it in action. So here's a proposal. I think Liz will load this proposal. Make Medigov a DAO. And so it's like, put all Medigov operations on chain. Alright, Liz. Let's see what you you think about this one. Alright. So we're gonna trigger it. Okay. Cool. So I've triggered it. And if you guys are following along the Telegram, you'll see that let me share my screen here. Okay. So in the Telegram, we've triggered this flow, and we could respond directly in our, in eyes in the app. But the the idea of Eyes is that you never have to do that. Like, you never have to actually go into Eyes. You can participate wherever you're most comfortable. So let's reply so reply to this and ask me your thoughts about what you think.

Speaker 3: Should

Speaker 1: we make Medigap or DAO? Right? So click that reply button there, and then just add your thoughts. So k. Yes. It doesn't need to be super well thought out. Just, like, add it to all these cool words. And just make sure to reply directly to that message as well so I can register it. So, Val, I I think yours would be registered. Alright. Cool. Cool. That is a Cynthia, that is a fair point. Alright, Liz. You heard it here first, everybody. We I can make it a DAO. Alright. So I'm gonna I've configured this step so I can end it early and just for the sake of this demo. And so I'm gonna end it. And so okay. So we have a a summary of kind of what we all think about this, right, which is that it's a mix of opinions, quarters that align with values and transparency and censorship resistance. There's a concern about exclusion, restricting operations. Okay. So now we can vote directly in the channel. So what do you guys think as your vote? Remember, it's two votes to approve, one vote to veto. So oh, man. Okay. So someone vetoed it. So it's not happening. We were not making mega of it down. So sorry, Liz. I know you were really excited about that. Okay. So I'm gonna I'm gonna go back to okay. So if we go back to this proposal, basically, everything that happened here is in this flow. Right? So I triggered it. We created consensus with AI. So here's our our summary. And then finally, we have this final vote where we said no. Right? So this whole process, which is, like, a fairly complicated process as automated, but also made legible through this, and we have all of our responses here as well. Okay. So let me go back to the Telegram. Okay. So it's one thing to oh, I'm sorry. I said you didn't get to vote. It's cable. We'll reopen the proposal. Okay. So what we'll start a new flow here. And what's interesting about eyes is that you can participate in eyes directly from Telegram. You can also initiate processes directly within the Telegram as well. So we're gonna cocreate a poll. Oops. Sorry. Oopsies. Forgot to co create a poll, and we're gonna do it on where should we have the next MediGov conference or the first Medigov conference. I don't know if we ever had one.

Speaker 2: We've never had our own. I like that.

Speaker 1: We've never had our own. Yeah. We got we have things like DWeb, but I don't know if that's a alright. Where should we have MediGov con? Cool. Okay. So right now, instead of someone just making a ballot for us and saying what to vote on, we're actually gonna make the ballot together, and then we're gonna vote on it together. And we're all gonna do this through Telegram. So alright. So everybody reply with this with, like, whatever city you think we should hold this in. Alright. Unless somebody has the final

Speaker 3: woah.

Speaker 1: I mean, yeah, for sure. I like that thought. Okay. Let's see what has the final thoughts. I'm gonna end this separately. Okay. So what you what you see it did here is it it actually summarized this and cleaned all of our responses up with l with, with AI. And so and then it created the poll. So add your votes. Got a second to add your votes. Okay. Cool. I'm gonna end this one early. Looks like we have a winner. Cool. So we're gonna do our next mega conference virtually, and maybe we could throw eyes in there as well as, like, little bad bad bad lines. Okay. So just to reiterate what just happened here is we created on a kind of sophisticated flow just on the fly within Telegram. So we collected everyone's ideas, and we voted on a final, solution. So let's go back into eyes. And so here, again, we've created this flow, which was weeks got all these ideas, and AI cleaned them up and, kind of deduplicated them for us, and then created a poll, and we decided virtual. Okay. So this is, like, the general idea of these flows, and hope you can kinda get a sense of that. These things can be where is that to? Oh, yeah. So let's so just to say that these can be pretty diverse in, like, how you think about, like, what these things actually do. Right? So what's important about eyes is that, we created, like, these different kinds of flows, but we actually have, like, a home for them. Right? So we have this demo group which can actually fully manage and own all these flows. So we can see everything that we've done so far today. All this activity is completely searchable within our group, and we have also all of our with all of the, you know, the final results, we have also all of the flows that belong to this group. Right? So discussing proof of and then discussing the proof of proposal, including flows to change the group itself. So remember I said earlier that in eyes, there are only flows. It's only process. There is no concept of admin. So, for example, if we wanted to change this group, evolving the demo group, that itself is a flow. Right? And so this flow works a little bit differently. It's just a trigger, and you evolve the group. And so trigger this flow. And so instead of just being a Telegram group, it can also be, for example, the d twenty governance Discord group. Right? And so we can add change the permissions of, who so add d twenty to mega of, group. And so we've done this through a flow. If we go back to the group, we've added d twenty to, our group. Okay. There's actually I'm realizing now that there's one very big topic we haven't discussed yet, and that's about this language of the flows and how you change the flows themselves. So I was gonna discuss in a proposal. This is the first flow we did. And so we have this flow, and it's pretty simple. And we might say, hey. We actually wanna make some changes to this. And maybe, for example, we wanna add another group on this or we wanna change the voting threshold or the voting mechanism. How do we actually do that? And so we can do is we use the evolve flow. And so you notice here that we have this flow template, which is just the flow we we all did earlier, which is creating a proposal and voting on it. But we also have the flow that changes the flow, and that it also has a trigger. You approve to vote. If there's a yes, we evolve the flow. And so let's go through this, and let's evolve the flow together. And so now we're in the config of this flow. Right? And remember, eyes is a language for a process. And so every aspect about how this flow works, we can change. Right? So we can change the trigger. We can change who can actually participate on this. And so we could say, no. Yeah. Like we did earlier, let's add since d 20 Discord here. We can add new fields. Right? We can have, like, date fields or option selections. We can change the number of days you have to respond if you have multiple responses. We can change the like, this is the prompt that AI has given to actually summarize responses. And so we did d 20 style. This is very, like, inspired by d 20. So summarize pros and cons briefly in Shakespearean. It was something that suddenly built in d 20, which I always it's always stuck in my mind. And then you can change really anything else. You change the threshold. So it's like, hey. A one vote veto was, like probably that's maybe a little bit too low. Let's make this two and make it a three vote approval. Alternatively, you could say, no. We're gonna make this a majority vote, right, or two thirds vote. We're gonna just we're gonna make it so AI decides. Right? So we're gonna say, choose the option with, the most transparency. Right? And you've collaboratively owned how you prompt that. So I'm just gonna reset this. So let's make do a very simple version of this, and let's change the threshold to three and two. Another thing you do here, just one side note, is you could add a default result as well. Right? So a kind of optimistic governance style. If there is no decision, a certain kind of of, certain option will be chosen every time. Alright. So change vote voting threshold for approving proposal. Alright. So this is gonna create a proposal. A because remember, like, approving and evolve evolving the flow is itself a flow. Oh, so it was it was vetoed. Wow. Controversial. Okay. Alright. I see you. Cool. Okay. So, yeah, we've transparently we voted in here. Transparently know the deal. We're not going to change the voting thresholds. Wow. Okay. So let's talk about a couple of different more flows. And so part of the inspiration of of eyes was, actually, Nina Schneider's modular politics paper, and a few things came out came out of that policy kit, for example, which you guys may are likely all familiar with came out of that paper. And so we can do things that are much closer to kind of like this modular politics vision as well. And so let's do the simplest possible example of that, and let's add kind of Airtable or Telegram permissions to accessing an Airtable library. And so we're gonna take the same demo Telegram group, and we are going to add a resource to a curated Airtable library. Right? So let's trigger this flow. And so let me get get my link. So let's do add article to MediGove library, and then we'll do oh, and then Cool. So the way we've configured this is that there's a trigger, and anyone who has this Telegram group can trigger it. And then, yeah, as the resource, there's no deliberate process. Right? So what we essentially done is add kind of Telegram group gating onto changing this this, this Airtable. So if we move into yeah. Exactly. If we move into PyTorch or into the we can see that we've added this new resource. So this is a super simple example of this, but it's a proof of concept to show that you can really add this collaborative layer. And just right now, it's all via webhook. You can really modify any kind of other tool. Right? And so you that could be a Blue Sky feed. That could be changing Discord admin permissions, creating a Google Calendar invite. Let's actually show a little bit more of a complex example here. How are you doing on time? I'll show the I'll just kind of walk through this example. We won't go through it. Where is this? So this is one I built for the hats community, and this is hats gated, which is a kind of NFT. There's a trigger. We collect ideas on an agenda item and times that work best for people and synthesize that with AI. We then do a ranked vote on the preferred agenda items and the times that work for people, and then we create a calendar invite with Google Calendar. Right? And so these can become fairly sophisticated and really to be anything you want. And so I hope this is the last example I'll show just to show that, like, really anything you can imagine, you can model with an IS process. And the idea of eyes is that now right now, it's fairly simple. It's just me working on it. But this will be a plug in ecosystem. Right? So you will have you can have a GitHub repo that's for quadratic loading module, and you could plug that into eyes. You can plug in there'll be, like, integrations with whatever tool you might use, whether that be maybe it'll be Polis. Maybe it will be Google Calendar, whatever. Right? So I'll pause there, and, we can just open up open up for questions.

Speaker 2: Awesome. Thank you, Ty. Yeah. We definitely had some questions coming in Starting with starting with Steve and Artem have a little back and forth here. Yeah, dumping all messages into a commonly used channel and then. Prioritizing seems essential and Artem replies. Or maybe creating multiple small deliberation spaces and rooms.

Speaker 1: I'm not fully sure I understand. Steve, would you mind clarifying that a little bit?

Speaker 4: I'm saying that that you can use this to to to dump everything into one channel like you're doing here in Telegram. And, therefore, when you do that, how is it being prioritized? There should be a prioritizing agent in between the messages and what you what it dumps next to the Telegram. So in other words, it should create some sort of buffer where it takes the incoming stuff, but then decides what to feed to you based upon your current priorities or, you know, work mode or whatever you're in. So it could kinda queue things up and then dump things out as, you know, would be appropriate, based upon, you know, if you just flip you know, put your status to whatever it is within the system, and it delivers things based upon that status.

Speaker 1: Yep. Yes. And that's actually is how it works. I want to, back on that in a second, but I think Arlene may have had even a reply to that. You want to, Arlene?

Speaker 3: You you want me to comment on Steve's?

Speaker 1: Oh, you guys just went back and forth

Speaker 3: in the

Speaker 1: channel, so I I thought that you might have had a a reply.

Speaker 3: Well, I raised my hand to ask you something else.

Speaker 1: Okay. Cool. Well, Steve, I can actually touch on that, which is there's, like, really two levels. So as is, again, it's about how you use your attention. Right? And it's how you use your individual attention, and it's how you use your collective attention. And so let's actually go into eyes again because I wanna kinda make that distinction more clear. So how a group uses their collective attention. And so when now we're in the demo group, that is all about through the flows that we call it watching. It's essentially sub subscribing to a flow. Right? So groups can subscribe to flows that they wanna pay attention to. But it's not everything. It's like the group collectively decides what they actually wanna look at. And how that's determined, what you actually what the group looks at happens through flows. Like, everything else in eyes is all flows. And so edit the watch flows to group. And so this one is very simple. There's no deliberative process. Anyone who's in the group can basically add the flows that, this group or change the flows that this group subscribes to. So it's like, hey. Are we sure this notification is a good use of our time and attention? And so the group can fully change that as they please. And so in this case, the only flows that they're gonna get notifications about are these ones. And the anything that's everything that's in the activity is from those flows. Right? But there's a second level of this, which is how you use your individual attention. And if we go back to home, you'd see what you could filter this watch by me or my groups or just watch by me. Right? And these are the flows that I've chosen to pay attention to myself. So these are the flows I've created or replied to or the ones I've just said, like, hey. I just wanna look at this. Like, what's going on? And these are the other flows that I'm watching. Right? And it's like the the watch and stop watching toggle. And so the idea of eyes is that, like, in the future, you'll be able to choose not just what you're paying attention to, but where you pay attention to it. So maybe like, hey. I'm an SMS person. I don't wanna look open my computer at all if I can help it. Me a text message with anything I need to reply to, and you'll be able to do that. Or maybe it's email or your Discord or your Telegram, whatever.

Speaker 4: Right.

Speaker 1: Cool. Are there?

Speaker 3: Okay. Can you see me? Can you hear me? Yes. Amazing. Hi, everyone. I'm also building a tool as part of the interoperable deliberative tools cohort like Tyler. And this is not the first time I'm watching the demo of Eyes. I'm very impressed with Eyes. I think it's a very elegant product, and I really admire it. My question is, do you think it's possible to implement something like sociocracy using eyes, or it's out of scope for you guys? Oh, sorry. I know that it's, like, only you at the moment, but still, like, is it is it out of scope for you or not?

Speaker 1: Can you give me a brief reminder about sociocracy, how how that works?

Speaker 3: Right. So, you know, I'm using it as an example of a, like, like a sophisticated governance methodology that consists of many different patterns. You could also think of agile, for instance. I think agile is a is a similar thing. So Yeah. Do you think it's possible to implement something like this with eyes? Or maybe you would want to be, like, a more, like, abstract governance layer or high level governance layer, and you would prefer to rely on the other tools that you would connect as modules?

Speaker 1: So so so yes and yes. So the actually, the initial idea of eyes was, like, kind of observing in MediGov and also web three spaces where everyone is like, okay. I have this special idea for, like, a governance methodology. Right? And, like, I'm gonna build a whole platform around this thing. Whereas, like, then you, like, use it, and you're like, oh, man. This is actually, like, not quite hitting in a very specific way for me. Like, there's, like, certain things about my workflow or how we need to work together that this doesn't do, and I feel like I'm missing something. And so I love the idea of eyes. It was like, how do we make it so that you can model really any kind of governance system or you can fork a governance system and just start doing your own thing. Right? And so, yes, agile, 100%. Like, that was actually a big a big thing I was thinking about as I was building this. Like, how I build agile rituals directly within eyes. And there's, like, some things missing from eyes to make that really, like, hit well right now, but that's definitely the vision. Sociocracy, I kinda forget the details of how that works. But, yes, like, the vision is that any any kind of governance system or coordination mechanism, you can model in eyes because it's a generic language. Parts of that are root I'm sorry. What was that?

Speaker 3: No. No. No. Sorry.

Speaker 1: So parts of that, you know, there's things additional things that need to be built in eyes for that to really be, like, slick and a a good experience and, like, certain kinds of, like, deliver the processes that still need to be built, but that's definitely the goal. To your second point, it's like there's might be additional UI layers that you might add for specific kinds of, like, totalizing governance systems. Right? So, like, agile has a it's not just one flow. It's multiple flows that all interrelate to each other. Similar with even, like, managing a Blue Sky feed, that's not just one flow. That's actually multiple flows. One's about moderating individual posts. One's about adding an account to be followed in a feed. And so instead, you might have a a way of collecting those flows together into, like, a holistic view and displaying it in a special way. And but the but to your your final point is, like, you can also use eyes as an infrastructure layer. And so the idea is that eyes will be something that you just kind of swipe label. It's like, hey. No. This is actually just infrastructure. It's an open source language for defining process. Like, integrate it within whatever your toolset you use. Eyes provides all this other infrastructure for plugging into Discord and Telegram and whatever be helpful for you. But, like, show in your UI. Like, if you don't want people to go into your to to eyes, totally fine. And that's definitely the goal. It's not where we're at now, but that's where we're heading. Mhmm.

Speaker 3: I'm asking because what we are trying to build right now is basically a tool for, like, running specific, like, workshops asynchronously, like a retrospective. Right? And I'm wondering if, like, you would want to implement retrospective as one of why eyes flows, or maybe if we could connect our tool to Eis so that we would do the retrospective, and then it would send the results of the retrospectives back into your flow.

Speaker 1: Both and. Right? So there's a version of retrospectives that you can do right now with us, and it's, like, simple. But I think there's special special ways you might do that UI and that user experience where you'd want, like, a plug in like Harmonica.

Speaker 3: Mhmm. Awesome. I really want to integrate with us, so I hope we can discuss it later.

Speaker 1: No. Me too. Yeah. That's definitely a bigger conversation, but I would love that as well. Yeah. Yeah. I think Rick was next.

Speaker 5: Yeah. Tyler, no. I I I get the gist and the spirit of it. And I put several questions in there. But rather than asking the specific questions, have you written sort of, like, an executive summary of the current capabilities and functions of it and what the future features you're aiming for. Because I can see so much potential. And, you know, it's it's like having a master curator that's both collective and individual so that if you have a interest and you're you're trying to, you know, capture the zeitgeist of a lot of messages and whatever, I I just I just see so much potential in terms of sense making. The other thing you mentioned is sense making tools. I don't know whether you have very diff you know, what what you what you mean by sense making tools and other different sense making tools that you're using. But if you haven't if you haven't already done one, I I I would be happy, and I'm sure other people would, to to to read such a document because I think it's got so much potential. But I appreciate your innovation. Last thing, there is somebody who I know, and if you give me an executive summary, I can send it to somebody who's a CTO of of an exponential organization, as, you know, entrepreneur for whatever, and he's always looking out for new cool things in IT. And I, you know, I could send it to him, run it by him and say, what do you think? You know? And Yeah. You need you need more support to do this work.

Speaker 1: Yes. Yeah. Okay. So a couple of things. I'll I'll definitely do that, and thank you for that offer. Really appreciate it. I am kind of I'm forgetting not tracking all the points you said, so let me find this something. But, you mentioned, yeah, I need more support. And, like, this is actually, like, a big conversation about this, which is, like, you know, how do you bring contributors onto this? What's the financial model of it? Right now, this is structured as a c corp. Right? And the goal is to open source, like, the language of eyes, but it's just me right now. I can't I don't have the ability to do that by myself. And so there's a big open question about, like, what's the legal financial structure? And I'm actually open to a lot of ways of doing this, but it's kind of uncharted territory in a lot of ways, especially, like, platform co ops, which I I would love to do. Super legally, financially questionable how that how you pull that off. There's very few examples. And so if you guys know anyone who is interested both technically in building this, as, like, an engineer, but also who are interested in, like, novel kind of, like, legal and financial mechanisms for, you know, incentivizing and, a broader community and making this a sustainable project, let me know.

Speaker 5: Well, actually, I just came from, exponential organizational mastermind group just prior to this. And, maybe we should connect, and I can share some information. You might wanna join. It's a it's a bit pricey, but, you know, it's it's connecting with people who've been around the block, who know how to scale things. If you don't know about exponential organization, you may wanna just Google that and look at it and see whether that fits into your, you know but you need a lot of help to get this. I mean, it's a great idea. Great idea. So I applaud you for your innovation.

Speaker 1: Oh, I appreciate it. Cool. Rosalind, I think your hand was up.

Speaker 6: I think fouls in sack ahead of me.

Speaker 1: Okay.

Speaker 2: Thanks. Yeah. Well, Liz was next and, Liz was asking just about, let me find it. She she said that because it's deployed in trusted community context, there's no need to build any resistance to abuse. Wondering what you think about that.

Speaker 1: Yeah. It's actually the goal of eyes is that, like, kinda up to you how you build a resistance for abuse. And so there might be context where, like, you like, hey. This is fine. Everyone anyone can say whatever. We're all friends here. Other times where you wanna dial that up a little bit or dial it up a lot. The way that you might do that right now is that you, through two ways. One is that you can set permissions for pretty much every aspect of eyes. Right? And so you might choose as having trigger or respond permission, something that has, like, civil resistance, for example, like, an Ethereum NFT or something or a a set of Ethereum addresses. You know, another thing you can do is that it's not a lot of the kind of how you make a a flow really secure and hard is about how you change how that flow evolves. Right? And so you can say, maybe this bigger group can participate in a flow, but a smaller group can actually be responsible for changing that flow. And so you can really build this in whatever way you want, level whatever level of security feels good for you.

Speaker 2: Cool. Yeah. That kind of gets to my question, which was, like, I feel like the starting point, like, where even where you're at in the groups you're working with, like, you're kind of creating a starting point for groups, and it kind of it can come out of, like, a group of, like, a founding community and the processes that they kind of want to, like, put into eyes off the jump. But then, like, after you kind of help them set up a few of these processes, like, those processes can evolve. Right? And, like, anyone can kind of change those things over time. So, yeah, I guess the, like I was just curious about if you kind of see it that way. Like, is there a sort of one on one, like, consult kind of group emergent process for setting up the processes that first get embedded into eyes, and then it kind of is like a, you know, free or free for, like, a free for all? Not totally, but, like,

Speaker 3: things It's

Speaker 1: it's actually it's a free for all the entire time. Mhmm. And what I mean by that is that, like, it's meant to be bottoms up emergent. So, like, anyone can create a flow about anything. And what determines whether that flow has buy in the living is whether people use it. Specifically, whether a group watches that flow and decides to subscribe to it. Right? So, like, I can create a flow for, you know, MediGov, how we elect the board of MediGov. And it's, like, has no validity because no one's using it or, like, paying attention to it. But if Liz creates that that flow and, like, gets people to use it, it's a different story. And so there is no gating on how you create a flow. It's just whether you get people to use it or not.

Speaker 2: Interesting. Cool. Alright. One more quick question. Rosalind, go for it.

Speaker 6: Yeah. Thanks. And I might follow-up in an email or something because I wanna go deep on some points and stuff. But I'm wondering jumping off of what Val was talking about, if there was, like, flow I saw you have flow templates. I don't know if that's something that goes from group to group. And if so, if eventually you're gonna build out maybe not just single flows as templates, but, like, flow packages that allow you to, like, import a certain set of tools. And that way, they can talk to each other. And connected to this, I saw how we trigger flows that are already built Yes. From inside of, like, a particular application. But I'm curious how do you can you build flows or edit flows from within an application? Because that's just a flow itself. So I'm wondering if those specifically need to be prebuilt. So that way, like, I just load this into my Slack and Discord and Telegram, and then I can edit and design flows from those platforms without having to go to eyes. I'm just thinking about it from a UX

Speaker 3: standpoint.

Speaker 1: Yeah. The the nomenclature is, like, a little bit confusing. I'm still working on it. A flow template is just a reusable process. It's just, like, a reasonable process that you can keep triggering over and over again. Right? And so that's when I say flow. I'm really talking about these flow templates. And but the idea is that you can fork those. I mean, I haven't built that feature yet, but, like, it's trivial to be able to, like, fork that template and be like, hey. I wanna take Medigov's template here and use it for my own organization and just change a couple things. Because it's all just config at the end of the day. It's like a CICD config. But then to your other point, yes, having bundle packages, like we're talking about before of, like, having your agile package or having a moderate a blue sky feed package. Like, you'll have a bunch of packages like that in that same way. And then you had another point. Oh, editing a flow within another application. Yes. Just more difficult because there's, like, a ton of validation on, like, how you set a a valid flow. And so it's like a question about how you make it so anyone could but it it might maybe it's like a widget or something that you can then do another application. I'm not sure. Maybe it's, like, an open source repo to add have those UI elements in that validation. But yeah. Great. Thank you.

Speaker 4: But do we have to, script stuff to make our own flows now or or what?

Speaker 1: Oh, it's just like a a flow builder, and so I'll just show one last thing before we we drop off.

Speaker 2: Make it quick.

Speaker 1: Oh, sorry. Oops. So it's it's easy to make a new flow. You just kinda click here. Be like, yeah. I wanna decide. Yes. Reasonable template. Anyone could participate. What should we do? Yes. This is, like, an easy flow builder, and then it spits out this config, essentially. So it's all on the UI right now. You're not creating, like, custom config, and you can kinda change every aspect of this. You can add a new collaborative step. You can trigger a webhook at the end of it. Really anything you might wanna do here.

Speaker 2: Super cool. I say we play more, and let's set up a community call for some time in the next couple weeks. I will message you, and, yeah, it's super, super awesome. So thank you so much, Ty, for sharing with all of us. Thank you all for coming. If you didn't get to ask your question, come to the Medigov seminar Slack channel, and, we can continue discussions there. And, yeah, let's keep playing with these tools and set up another time to do that. So, with that, we'll give everyone the rest of their days. Go off. Be

Speaker 4: my boy. Come on. Woo

Speaker 2: hoo. Alright.

Speaker 1: Bye. That's

Speaker 2: Everyone. Goodbye. Around. Thank you. Thank you.

Speaker 1: Alright. Good to see you. Guys.

Speaker 5: Taylor, I put my phone Hi, everyone. Chat.

Speaker 1: I saw that, Rick. Thank you. Hey. I appreciate all the feedback and time. And, yeah. So lovely seeing all you guys.

Speaker 2: Thanks, Ty. Bye, Ron.